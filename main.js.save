const exp = require("express");
const mongo = require("mongodb");
const bodyParser = require("body-parser");
const path = require("path");
const app = exp()
//STATIC FILES SETUP
app.use('/public',exp.static('public'));

//VIEW ENGINE
app.set('view engine','pug');
app.set('views',path.join(__dirname,'views'));

//FORM DATA SETUP
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended:true}))

//DATABASE INTREGATION
let db;
let collection;
async function connectDatabase(uri,dbname){
	const client = new mongo.MongoClient(uri,{useNewUrlParser:true,useUnifiedTopology:true});
	try{
		await client.connect();
		db = client.db(dbname);
		console.log("Connection to database successfull");
	}
	catch(err){
		console.log(err);
	}
}
const uri = "mongodb+srv://Munsif:wasteinocean@cropchop.x60cw.mongodb.net/?retryWrites=true&w=majority";
const dbname = "texttrack";

//ROUTES
app.get('/',function(req,res){
	query={
		'error':0,
		'text_title':"",
		'text_body':"",
		'edit_code':"",
		'custom_url':""
	}
	res.render('home',{'data':query,'mode':'create');
})


function verifyEntries(th,tb,ec,cu){
	//text header
	th = th.trim();
	th = (th && th.length <=  40);
	//text body
	tb = tb.trim();
	tb = (tb && tb.length <= 2000);
	//edit code
	ec = ec.replace(" ", "").trim();
	ec = (ec && ec.length <= 9 && ec.length >= 5);
	//custom url
	cu = cu.replace(/[^a-zA-Z0-9]/g,'').trim();
	cu = (cu && cu.length <= 9 && cu.length >= 5);
	if(!th){
		throw "Please check your Title Field it must contain minimum of 1 character and max 20 characters are allowed.";
	}
	else if(!tb){
		throw "The textbox must contain minimun 10 characters and maximum of 900";
	}
	else if(!ec){
		throw "Invalid or empty 'Edit code'";
	}
	else if(!cu){
		throw "Invalid or empty 'custom url'";
	}
	else{
		return true;
	}
}
app.post('/',async function(req,res){
	const fdata = req.body;
	var text_header = fdata.text_header;
	var text_body = fdata.text_body;
	var edit_code = fdata.edit_code.replace(" ","");
	var custom_url = fdata.custom_url.replace(" ","");
	try{
		verifyEntries(text_header,text_body,edit_code,custom_url);
		let date = new Date();
		await collection.insertOne({
					'text_header':text_header,
					'text_body':text_body,
					'edit_code':edit_code,
					'custom_url':custom_url,
					'date':date
				});
		console.log("successfully added data");
		res.redirect("/"+custom_url);
	}
	catch(err){
		console.log(err);
		var error_message = "Error: "+err;
		var onError = {
			'error':error_message,
			'text_title':text_header,

			'text_body':text_body,
			'edit_code':edit_code,
			'custom_url':custom_url
		};
		console.log(onError);
		res.render('home',onError);
	}
})

function formatDate(e){
  var date = `${e.getDate()}/${e.getMonth()+1}/${e.getFullYear()} ${e.getHours()}:${e.getMinutes()}`;
  return date;
}
//view page
app.get('/:x',async (req,res)=>{
	const user_query = req.params.x;
	const getText = await collection.find({'custom_url':user_query}).toArray();
	if(getText.length > 0){
	    data = getText[0];
	    date = data['date'];
	    data['date'] = formatDate(date);
	    res.render('view_text',data);
	}else{
	    res.send("Nothing found here!!");
	}
})
app.get("/edit/:x",async (req,res)=>{
	const page_path = req.params.x;
	const fetch_data = await collection.find({'custom_url':page_path}).toArray();
        if(fetch_data.length > 0){
		data = fetch_data[0];
		//change mode
		data['mode'] = 'edit';
		res.render('home',data);
	}
})

//START SERVER ON SUCCESSFULL DATABASE CONNECTION;
connectDatabase(uri,dbname).then(function(){
        collection = db.collection("text_data");
	console.log("Starting server");
	var server = app.listen(5500, function(err) {
  		if(err){console.log(err)};
		var port = server.address().port;
   		console.log("Listening on port %s", port);

	})
});
